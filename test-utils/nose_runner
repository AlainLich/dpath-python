#!/usr/bin/env python3
#
# Allow to run nose2 tests with predefined variables as defined in options.py
#
# (C) A.Lichnewsky, 2022, 2023

import nose2
import sys
from dpath import options as OPTS
import argparse


def do_main():
    description = """
    This runs nose2 testframe giving the user the ability to set options
          and in particular DPATH_ACCEPT_RE_REGEXP

    Usage:
            PYTHONPATH=<as appropriate> nose_runner [-d] [-E] [-K] [-D <val>]  [-s <test directory>] <test-specs>

    Flags:
    """

    argLineParser = argparse.ArgumentParser(description=description,
                                            formatter_class=argparse.RawTextHelpFormatter)
    argLineParser.add_argument("-d", "--debug", action="store_true", dest="doDebug",
                               help="Debug messages on stderr"),

    argLineParser.add_argument("-E", "--extended", action="store_true", dest="doExtendedPath",
                               help="Enable regexp extended paths")

    argLineParser.add_argument("-K", "--emptyStringKeys", action="store_true", dest="doEmptyStringKeys",
                               help="Enable regexp extended paths")

    argLineParser.add_argument("-v", "--verbose",  action="store_true",  dest="noseVerbose",
                               help="Request nose prints tests entered and result")

    argLineParser.add_argument("-s", "--StartDir", dest="startDir", metavar="FILE",
                               help="Directory to start nose2 discovery")

    argLineParser.add_argument('test_specs',nargs="?", help="test specifications for nose2")

    try:
        options = argLineParser.parse_args()
        if options.doDebug:
            print(repr(options), file=sys.stderr)

        if options.doExtendedPath:
            OPTS.DPATH_ACCEPT_RE_REGEXP = True

        if options.doEmptyStringKeys:
            OPTS.ALLOW_EMPTY_STRING_KEYS = True

    except Exception:
        print("Quitting because of error(s)", file=sys.stderr)

        sys.exit(1)

    sys.argv = [el for el in sys.argv if not (el in ("-d", "-K", "-E", "-D", "-N"))]

    if options.doDebug:
        print(f"Accept extended regexp:{OPTS.DPATH_ACCEPT_RE_REGEXP}", file=sys.stderr)
        print(f"Allow empty string keys:{OPTS.ALLOW_EMPTY_STRING_KEYS}", file=sys.stderr)
        print(f"Start discovery at:{options.startDir}", file=sys.stderr)

        print(f"Nose2.discover arglist:{sys.argv}")

    ret = nose2.discover()
    print("Tests return cc={ret}", file=sys.stderr)


if __name__ == '__main__':
    do_main()
