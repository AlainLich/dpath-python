#!/usr/bin/env bash

# ......................................................................
#  Function :
#          - check pypy installation
#          - run pypy test
#
#
#   Normally used/called by devel-Steps -y.
#
#   Generalization;
#      This proc does not know about installation parameters... files
#      and directories need to be passes explicitely
# ......................................................................
#
#  (C) Alain Lichnewsky, 2022
#
# ......................................................................
trap 'status=$?; echo "error status is $status"; trap - EXIT; exit $status' ERR
SCRIPTPATH=$(dirname $(realpath $0))
SCRIPTNAME=$(basename $(realpath $0))

# ......................................................................
# Configurables
# ......................................................................
PYPY=pypy3
# ......................................................................


function requireApproval () {
    question="$1"
    ok="YyOo"
    notOK="nN"
    pattern="[oOyY]"
    prompt="Answer [${ok}]? "
    count=0

    echo "$question"
    read -p "${prompt}" -n 1 inchar
    while (( $count < 4 )) ; do
	if [[ "$inchar" =~ $pattern ]] ; then
	    echo ""
	    return
	else
	    exit 1
	fi
	count=$(( 1 + $count))
    done
    exit 1
}

function run_pypy () {
    declare -r target="$1"
    declare -r pythonpath="$2"

    declare -r pythonpath2="${pythonpath}:${HOME}/.local/lib/python3.10/site-packages/:/usr/local/lib/python3.10/dist-packages/" 
    export PYTHONPATH="${pythonpath2}" 

    echo ${ECHO} PYTHONPATH="${pythonpath2}"
    ${ECHO} ${PYPY} ${target} ${@: 3} 
}

function usage() {
  less >/dev/stderr <<EOF
usage:
    ${0} [-h|-d|-v] [-t <target>] [-r <option>] 

Function:
    -h         : print this help
    -v         : verbose mode
    -d         : debug mode: echo commands instead of executing (env. ECHO) 
    -r <target> : run pypy on target

EOF
  exit 1
}

doProc="default"
while getopts "dhvr:" opt; do
    foundOpt=1
    case "$opt" in
    d)  verbose=1 ;
        ECHO=echo 	    
        ;;
    h|\?)
        usage
        ;;
    r) runtarget="${OPTARG}"
        doProc=runPypy
        ;;

    -)  echo found --
        xmit_eol=1
        break
        ;;

   *)  # redundant clause if getopts is totally selective
	    echo Incorrect argument "$opt" >/dev/stderr
	    exit 2
    esac
done  

if [ "${foundOpt}" == "" ] ; then
    echo Incorrect command line, one of the flags is required
    usage
    exit 1
fi

# see bash manual for "getopts" function, OPTIND is positioned to
# index of first positional argument
if [ $OPTIND -le $# ] ; then
       supplem_args="${@: ${OPTIND} }"
fi

case "${doProc}" in
    runPypy)
        echo running pypy
        run_pypy "${runtarget}" "${HOME}/dpath-source" ${supplem_args}
        ;;
    *)
        echo unexpected command \"${doProc}\" 
	    exit 1
        ;;
esac
   
